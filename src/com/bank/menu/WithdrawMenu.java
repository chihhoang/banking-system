/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.bank.menu;

import javax.swing.JOptionPane;

import com.bank.exceptions.InsufficientFundsException;
import com.bank.helpers.Formatter;
import com.bank.models.Bank;
import com.bank.models.Customer;

/**
 *
 * @author chihoang
 */
public class WithdrawMenu extends javax.swing.JDialog {

	private Customer customer;
	private Bank bank;

	/**
	 * Creates new form WithdrawMenu
	 */
	public WithdrawMenu(java.awt.Frame parent, boolean modal, Bank bank,
	    Customer customer) {
		super(parent, modal);
		initComponents();
		setLocationRelativeTo(parent);
		this.customer = customer;
		this.bank = bank;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		withdrawLabel = new javax.swing.JLabel();
		withdrawField = new javax.swing.JTextField();
		withdrawButton = new javax.swing.JButton();
		cancelButton = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setTitle("Withdrawal Menu");
		getContentPane().setLayout(new java.awt.GridLayout(2, 2, 5, 5));

		withdrawLabel.setText("Withdraw Amount");
		getContentPane().add(withdrawLabel);

		withdrawField.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				withdrawFieldActionPerformed(evt);
			}
		});
		getContentPane().add(withdrawField);

		withdrawButton.setText("Withdraw");
		withdrawButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				withdrawButtonActionPerformed(evt);
			}
		});
		getContentPane().add(withdrawButton);

		cancelButton.setText("Cancel");
		cancelButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cancelButtonActionPerformed(evt);
			}
		});
		getContentPane().add(cancelButton);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void withdrawFieldActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_withdrawFieldActionPerformed
	}// GEN-LAST:event_withdrawFieldActionPerformed

	private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cancelButtonActionPerformed
		this.dispose();
	}// GEN-LAST:event_cancelButtonActionPerformed

	private void withdrawButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_withdrawButtonActionPerformed
		StringBuilder warnings = new StringBuilder();
		// Verify the withdraw is not empty
		if (withdrawField.getText().isEmpty()) {
			warnings.append("Withdraw amount is required\n");
		} else {
			double amount = 0.0;

			try {
				amount = Bank.round(Double.parseDouble(withdrawField.getText()), 2);
				int result = JOptionPane.showConfirmDialog(this,
				    "Withdraw an amount of " + Formatter.formatDollar(amount)
				        + " from the account?\nFee: "
				        + Formatter.formatDollar(bank.getTransactionFee()));

				if (result == JOptionPane.OK_OPTION) {
					try {
						// Make the withdraw
						bank.withdraw(customer.getAccount().getAccountNumber(), amount);
						this.dispose();
						JOptionPane.showMessageDialog(this,
						    "Withdraw an amount of " + Formatter.formatDollar(amount)
						        + " with a fee of "
						        + Formatter.formatDollar(bank.getTransactionFee()));
					} catch (InsufficientFundsException ex) {
						warnings.append("Insufficient funds to complete transaction\n");
					}
				}
			} catch (NumberFormatException e) {
				warnings.append("Withdraw must be a number.\n");
			}
		}

		// Verify the withdraw is a positive number

		if (warnings.length() > 0) {
			JOptionPane.showMessageDialog(this, warnings.toString(),
			    "Withdraw Warnings", JOptionPane.WARNING_MESSAGE);
		}
	}// GEN-LAST:event_withdrawButtonActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton cancelButton;
	private javax.swing.JButton withdrawButton;
	private javax.swing.JTextField withdrawField;
	private javax.swing.JLabel withdrawLabel;
	// End of variables declaration//GEN-END:variables
}
