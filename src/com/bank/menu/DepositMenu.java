/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.bank.menu;

import com.bank.exceptions.InvalidAmountException;
import com.bank.models.Bank;
import com.bank.models.Customer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author chihoang
 */
public class DepositMenu extends javax.swing.JDialog {

  private Customer customer;
  /**
   * Creates new form DepositMenu
   */
  public DepositMenu(java.awt.Frame parent, boolean modal, Customer customer) {
    super(parent, modal);
    initComponents();
    setLocationRelativeTo(parent);
    this.customer = customer;
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    depositLabel = new javax.swing.JLabel();
    depositField = new javax.swing.JTextField();
    depositButton = new javax.swing.JButton();
    cancelButton = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle("Deposit Menu");
    getContentPane().setLayout(new java.awt.GridLayout(2, 2, 5, 5));

    depositLabel.setText("Deposit Amount");
    getContentPane().add(depositLabel);

    depositField.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        depositFieldActionPerformed(evt);
      }
    });
    getContentPane().add(depositField);

    depositButton.setText("Deposit");
    depositButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        depositButtonActionPerformed(evt);
      }
    });
    getContentPane().add(depositButton);

    cancelButton.setText("Cancel");
    cancelButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cancelButtonActionPerformed(evt);
      }
    });
    getContentPane().add(cancelButton);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void depositFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depositFieldActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_depositFieldActionPerformed

  private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
    this.dispose();
  }//GEN-LAST:event_cancelButtonActionPerformed

  private void depositButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depositButtonActionPerformed
    StringBuilder warnings = new StringBuilder();
    // Verify the deposit is not empty
    if (depositField.getText().isEmpty()) {
      warnings.append("Deposit amount is required\n");
    } else {
      double amount = 0.0;
      
      try {
        amount = Bank.round(Double.parseDouble(depositField.getText()), 2);
        int result = JOptionPane.showConfirmDialog(this, "Deposit an amount of $" + String.format("%.2f", amount) + " to the account?");
        
        if (result == JOptionPane.OK_OPTION) {
          try {
            // Make the deposit
            customer.getAccount().deposit(amount);
            this.dispose();
            JOptionPane.showMessageDialog(this, "Deposited an amount of $" + String.format("%.2f", amount) + "\nInterest Earned: $" + String.format("%.2f", customer.getAccount().getInterest() * amount));

          } catch (InvalidAmountException ex) {
            warnings.append("Deposit amount is invalid\n");
          }
        }
      } catch (NumberFormatException e) {
        warnings.append("Deposit must be a number.\n");
      }
    }
    
    // Verify the deposit is a positive number
      
    if (warnings.length() > 0) {
      JOptionPane.showMessageDialog(this, warnings.toString(), "Deposit Warnings", JOptionPane.WARNING_MESSAGE);
    }
  }//GEN-LAST:event_depositButtonActionPerformed


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton cancelButton;
  private javax.swing.JButton depositButton;
  private javax.swing.JTextField depositField;
  private javax.swing.JLabel depositLabel;
  // End of variables declaration//GEN-END:variables
}
